name: Release Events

on:
  release:
    types: [published]

permissions:
  id-token: write
  deployments: write

jobs:
  deploy-dev:
    name: Deploy to dev
    runs-on: ubuntu-latest
    if: github.event.release.prerelease == true
    environment:
      name: dev
      url: https://gps-billpay.dev.utah.gov

    steps:
      - name: üöÄ Deploy
        uses: agrc/firebase-website-deploy-composite-action@v1
        with:
          identity-provider: ${{ secrets.IDENTITY_PROVIDER }}
          service-account-email: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
          project-id: ${{ secrets.PROJECT_ID }}
          prebuild-command: touch ./functions/.env && echo VPC=$VPC >> ./functions/.env && echo PROJECT_ID=$GCP_PROJECT >> ./functions/.env
          build-command: npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ vars.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ vars.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_DATABASE_URL: ${{ vars.VITE_FIREBASE_DATABASE_URL }}
          VITE_FIREBASE_PROJECT_ID: ${{ vars.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ vars.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ vars.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APPID: ${{ vars.VITE_FIREBASE_APPID }}
          VPC: ${{ secrets.VPC }}

  deploy-prod:
    name: Deploy to production
    runs-on: ubuntu-latest
    if: github.event.release.prerelease == false
    environment:
      name: prod
      url: https://turngps-billpay.ugrc.utah.gov

    steps:
      - name: üöÄ Deploy
        uses: agrc/firebase-website-deploy-composite-action@v1
        with:
          identity-provider: ${{ secrets.IDENTITY_PROVIDER }}
          service-account-email: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
          project-id: ${{ secrets.PROJECT_ID }}
          service-now-instance: ${{ secrets.SN_INSTANCE }}
          service-now-table: ${{ secrets.SN_TABLE }}
          service-now-system-id: ${{ secrets.SN_SYS_ID }}
          service-now-username: ${{ secrets.SN_USERNAME }}
          service-now-password: ${{ secrets.SN_PASSWORD }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          build-command: npm run build
          prebuild-command: touch ./functions/.env && echo VPC=$VPC >> ./functions/.env && echo PROJECT_ID=$GCP_PROJECT >> ./functions/.env
        env:
          VITE_FIREBASE_API_KEY: ${{ vars.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ vars.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_DATABASE_URL: ${{ vars.VITE_FIREBASE_DATABASE_URL }}
          VITE_FIREBASE_PROJECT_ID: ${{ vars.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ vars.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ vars.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APPID: ${{ vars.VITE_FIREBASE_APPID }}
          VPC: ${{ secrets.VPC }}

      - name: üóùÔ∏è Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ inputs.identity_provider }}
          service_account: ${{ inputs.service_account_email }}
          token_format: 'access_token'

      - name: ‚òÅÔ∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üï∞Ô∏è Create Cloud Scheduler
        shell: bash
        run: |
          for i in $(gcloud scheduler jobs list --location=us-central1 --uri); do
            gcloud scheduler jobs delete $i --quiet
          done
          gcloud scheduler jobs create http contact-sync-schedule \
            --description="Trigger the TURN GPS contact sync bot once a day in the evening" \
            --schedule="0 18 * * *" \
            --time-zone=America/Denver \
            --location=us-central1 \
            --uri="https://us-central1-${{ inputs.project_id }}.cloudfunctions.net/syncTrimbleUsers" \
            --oauth-service-account-email=scheduler-sa@${{ inputs.project_id }}.iam.gserviceaccount.com

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: üí¨ Comment on issues in release
        uses: agrc/release-issue-notifications-action@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
